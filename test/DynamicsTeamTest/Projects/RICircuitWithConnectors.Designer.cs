 

// Do not edit
// generated by https://svn.isis.vanderbilt.edu/META/sandbox/DynamicsTeam/test/GenerateDynamicsTeamTest

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Xunit;
using System.IO;
using GME.MGA;

namespace DynamicsTeamTest.Projects
{
    public class RICircuitWithConnectorsFixture : XmeImportFixture
    {
        protected override string xmeFilename
        {
            get { return Path.Combine("RICircuitWithConnectors", "RICircuitWithConnectors.xme"); }
        }
    }

    public partial class RICircuitWithConnectors : IUseFixture<RICircuitWithConnectorsFixture>
    {
        internal string mgaFile { get { return this.fixture.mgaFile; } }
        private RICircuitWithConnectorsFixture fixture { get; set; }

        public void SetFixture(RICircuitWithConnectorsFixture data)
        {
            this.fixture = data;
        }

        //[Fact]
        //[Trait("Model", "RICircuitWithConnectors")]
        //[Trait("ProjectImport/Open", "RICircuitWithConnectors")]
        //public void ProjectXmeImport()
        //{
        //    Assert.True(File.Exists(mgaFile), "Failed to generate the mga.");
        //}

        [Fact]
        [Trait("Model", "RICircuitWithConnectors")]
        [Trait("ProjectImport/Open", "RICircuitWithConnectors")]
        public void ProjectMgaOpen()
        {
            var mgaReference = "MGA=" + mgaFile;

            MgaProject project = new MgaProject();
            project.OpenEx(mgaReference, "CyPhyML", null);
            project.Close(true);
            Assert.True(File.Exists(mgaReference.Substring("MGA=".Length)));
        }

        [Fact]
        [Trait("Model", "RICircuitWithConnectors")]
        [Trait("CheckerShouldFail", "RICircuitWithConnectors")]
        public void Fail_InvalidModelicaConnectorConnections_RICircuit_InvalidConnectionsComponent1()
        {
            string outputDir = "InvalidModelicaConnectorConnections_RICircuit_InvalidConnectionsComponent1";
            string testBenchPath = "/@Testing|kind=Testing|relpos=0/@InvalidModelicaConnectorConnections|kind=Testing|relpos=0/@RICircuit_InvalidConnectionsComponent1|kind=TestBench|relpos=0";

            Assert.True(File.Exists(mgaFile), "Failed to generate the mga.");
            bool result = CyPhy2ModelicaRunner.Run(outputDir, mgaFile, testBenchPath);

            Assert.False(result, "CyPhy2Modelica_v2 should have failed, but did not.");
        }

        [Fact]
        [Trait("Model", "RICircuitWithConnectors")]
        [Trait("CheckerShouldFail", "RICircuitWithConnectors")]
        public void Fail_InvalidModelicaConnectorConnections_RICircuit_InvalidConnectionsComponent()
        {
            string outputDir = "InvalidModelicaConnectorConnections_RICircuit_InvalidConnectionsComponent";
            string testBenchPath = "/@Testing|kind=Testing|relpos=0/@InvalidModelicaConnectorConnections|kind=Testing|relpos=0/@RICircuit_InvalidConnectionsComponent|kind=TestBench|relpos=0";

            Assert.True(File.Exists(mgaFile), "Failed to generate the mga.");
            bool result = CyPhy2ModelicaRunner.Run(outputDir, mgaFile, testBenchPath);

            Assert.False(result, "CyPhy2Modelica_v2 should have failed, but did not.");
        }

        [Fact]
        [Trait("Model", "RICircuitWithConnectors")]
        [Trait("CheckerShouldFail", "RICircuitWithConnectors")]
        public void Fail_InvalidModelicaConnectorConnections_RICircuit_InvalidConnectionsTC()
        {
            string outputDir = "InvalidModelicaConnectorConnections_RICircuit_InvalidConnectionsTC";
            string testBenchPath = "/@Testing|kind=Testing|relpos=0/@InvalidModelicaConnectorConnections|kind=Testing|relpos=0/@RICircuit_InvalidConnectionsTC|kind=TestBench|relpos=0";

            Assert.True(File.Exists(mgaFile), "Failed to generate the mga.");
            bool result = CyPhy2ModelicaRunner.Run(outputDir, mgaFile, testBenchPath);

            Assert.False(result, "CyPhy2Modelica_v2 should have failed, but did not.");
        }

        [Fact]
        [Trait("Model", "RICircuitWithConnectors")]
        [Trait("CheckerShouldFail", "RICircuitWithConnectors")]
        public void Fail_InvalidModelicaConnectorConnections_RICircuit_InvalidConnectionsComponent2()
        {
            string outputDir = "InvalidModelicaConnectorConnections_RICircuit_InvalidConnectionsComponent2";
            string testBenchPath = "/@Testing|kind=Testing|relpos=0/@InvalidModelicaConnectorConnections|kind=Testing|relpos=0/@RICircuit_InvalidConnectionsComponent2|kind=TestBench|relpos=0";

            Assert.True(File.Exists(mgaFile), "Failed to generate the mga.");
            bool result = CyPhy2ModelicaRunner.Run(outputDir, mgaFile, testBenchPath);

            Assert.False(result, "CyPhy2Modelica_v2 should have failed, but did not.");
        }

        [Fact]
        [Trait("Model", "RICircuitWithConnectors")]
        [Trait("CyPhy2Modelica", "RICircuitWithConnectors")]
        public void Testing_RICircuit3Metrics_CA()
        {
            string outputDir = "Testing_RICircuit3Metrics_CA";
            string testBenchPath = "/@Testing|kind=Testing|relpos=0/@RICircuit3Metrics_CA|kind=TestBench|relpos=0";

            Assert.True(File.Exists(mgaFile), "Failed to generate the mga.");
            bool result = CyPhy2ModelicaRunner.Run(outputDir, mgaFile, testBenchPath);

            Assert.True(result, "CyPhy2Modelica_v2 failed.");
        }

        [Fact]
        [Trait("Model", "RICircuitWithConnectors")]
        [Trait("CyPhy2Modelica", "RICircuitWithConnectors")]
        public void Testing_RICircuit_CA()
        {
            string outputDir = "Testing_RICircuit_CA";
            string testBenchPath = "/@Testing|kind=Testing|relpos=0/@RICircuit_CA|kind=TestBench|relpos=0";

            Assert.True(File.Exists(mgaFile), "Failed to generate the mga.");
            bool result = CyPhy2ModelicaRunner.Run(outputDir, mgaFile, testBenchPath);

            Assert.True(result, "CyPhy2Modelica_v2 failed.");
        }


        [Fact(Skip = "Surrogates are not supported")]
        [Trait("Model", "RICircuitWithConnectors")]
        [Trait("PET", "RICircuitWithConnectors")]
        public void RI_ResponceSurface3Metrics_CA()
        {
            string outputDir = "RI_ResponceSurface3Metrics_CA";
            string petExperimentPath = "/@Testing|kind=Testing|relpos=0/@PET|kind=ParametricExplorationFolder|relpos=0/@RI_ResponceSurface3Metrics_CA|kind=ParametricExploration|relpos=0";

            Assert.True(File.Exists(mgaFile), "Failed to generate the mga.");
            bool result = CyPhyPETRunner.Run(outputDir, mgaFile, petExperimentPath);

            Assert.True(result, "CyPhyPET failed.");
        }

        [Fact(Skip = "Surrogates are not supported")]
        [Trait("Model", "RICircuitWithConnectors")]
        [Trait("PET", "RICircuitWithConnectors")]
        public void RI_ResponceSurface_CA()
        {
            string outputDir = "RI_ResponceSurface_CA";
            string petExperimentPath = "/@Testing|kind=Testing|relpos=0/@PET|kind=ParametricExplorationFolder|relpos=0/@RI_ResponceSurface_CA|kind=ParametricExploration|relpos=0";

            Assert.True(File.Exists(mgaFile), "Failed to generate the mga.");
            bool result = CyPhyPETRunner.Run(outputDir, mgaFile, petExperimentPath);

            Assert.True(result, "CyPhyPET failed.");
        }

        [Fact]
        [Trait("Model", "RICircuitWithConnectors")]
        [Trait("PCC", "RICircuitWithConnectors")]
        public void RI_PCC_CA()
        {
            string outputDir = "RI_PCC_CA";
            string petExperimentPath = "/@Testing|kind=Testing|relpos=0/@PCC|kind=ParametricExplorationFolder|relpos=0/@RI_PCC_CA|kind=ParametricExploration|relpos=0";

            Assert.True(File.Exists(mgaFile), "Failed to generate the mga.");
            bool result = CyPhyPETRunner.Run(outputDir, mgaFile, petExperimentPath);

            Assert.True(result, "CyPhyPET failed.");
        }

        [Fact]
        [Trait("Model", "RICircuitWithConnectors")]
        [Trait("PCC", "RICircuitWithConnectors")]
        public void RI_PCC3Metrics_CA()
        {
            string outputDir = "RI_PCC3Metrics_CA";
            string petExperimentPath = "/@Testing|kind=Testing|relpos=0/@PCC|kind=ParametricExplorationFolder|relpos=0/@RI_PCC3Metrics_CA|kind=ParametricExploration|relpos=0";

            Assert.True(File.Exists(mgaFile), "Failed to generate the mga.");
            bool result = CyPhyPETRunner.Run(outputDir, mgaFile, petExperimentPath);

            Assert.True(result, "CyPhyPET failed.");
        }

    }
}

